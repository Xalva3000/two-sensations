# @router.callback_query(F.data == "back_to_companions")
# async def back_to_companions(callback: CallbackQuery):
#     try:
#         await callback.message.delete()
#     except:
#         pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
#
# #     await callback.message.answer(
# #         "üë• –í–∞—à–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏:",
# #         reply_markup=get_companions_menu_keyboard()
# #     )

# @router.callback_query(F.data == "menu_view_outer_companion")
# async def view_outer_companion(callback: CallbackQuery):
#     user = await db.get_user(callback.from_user.id)
#     if not user or not user.get('outer_companion_telegram_id'):
#         await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –Ω–∞—à–ª–∏")
#         return
#
#     companion = await db.get_companion_info(user['outer_companion_telegram_id'])
#     if not companion:
#         await callback.answer("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
#         return
#
#     await show_companion_profile(callback, companion, "outer")
#
#
# @router.callback_query(F.data == "menu_view_income_companion")
# async def view_income_companion(callback: CallbackQuery):
#     user = await db.get_user(callback.from_user.id)
#     if not user or not user.get('income_companion_telegram_id'):
#         await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –Ω–∞—à–µ–ª")
#         return
#
#     companion = await db.get_companion_info(user['income_companion_telegram_id'])
#     if not companion:
#         await callback.answer("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
#         return
#
#     await show_companion_profile(callback, companion, "income")

# async def show_companion_profile(callback: CallbackQuery, companion, companion_type):
#     try:
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
#         if not companion:
#             await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
#             return
#
#         # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
#         profile_text = format_companion_profile(companion, companion_type)
#
#         # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
#         keyboard = get_companion_action_keyboard(companion['telegram_id'], companion_type)
#
#         # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
#         await send_companion_message(callback, companion, profile_text, keyboard)
#
#     except Exception as e:
#         print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è companion: {e}")
#         await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")


# async def send_companion_message(callback, companion, profile_text, keyboard):
#     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
#     photo_id = companion.get('photo_id')
#     is_photo_confirmed = companion.get('is_photo_confirmed', False)
#
#     # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
#     can_send_photo = photo_id and is_photo_confirmed
#
#     if can_send_photo:
#         try:
#             await callback.message.answer_photo(
#                 photo_id,
#                 caption=profile_text,
#                 reply_markup=keyboard
#             )
#             return
#         except Exception as e:
#             print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ companion: {e}")
#             # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
#
#     # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (fallback)
#     await callback.message.answer(
#         profile_text,
#         reply_markup=keyboard
#     )

# @router.callback_query(F.data.startswith("report_"))
# async def report_companion(callback: CallbackQuery):
#     companion_id = int(callback.data.replace('report_', ''))
#     # –õ–æ–≥–∏–∫–∞ —Ä–µ–ø–æ—Ä—Ç–∞
#     await callback.answer("–†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

# @router.callback_query(F.data.startswith("decrease_balance_"))
# async def decrease_companion_balance(callback: CallbackQuery):
#     # –ø–æ–ª—É—á–µ–Ω–∏–µ id —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
#     companion_id = int(callback.data.replace('decrease_balance_', ''))
#     # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
#     await db.decrease_balance(companion_id)
#     await callback.answer("–û—á–∫–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Ç–∞—é—Ç!")
#
# @router.callback_query(F.data.startswith("increase_balance_"))
# async def increase_companion_balance(callback: CallbackQuery):
#     # –ø–æ–ª—É—á–µ–Ω–∏–µ id —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
#     companion_id = int(callback.data.replace('increase_balance_', ''))
#     # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
#     await db.increase_balance(companion_id)
#     await callback.answer("–û—á–∫–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤–∑–ª–µ—Ç–∞—é—Ç!")

# @router.callback_query(F.data.startswith("message_"))
# async def message_companion(callback: CallbackQuery):
#     companion_id = int(callback.data.replace('message_', ''))
#     companion = await db.get_user(companion_id)
#     if companion and companion.get('username'):
#         await callback.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ @{companion['username']}")
#     else:
#         await callback.answer("Username –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")


#
# @router.callback_query(F.data == "settings_remove_income_companion")
# async def confirm_remove_income_companion(callback: CallbackQuery, state: FSMContext):
#     keyboard = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_income_delete")],
#         [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
#     ])
#
#     await callback.message.edit_text(
#         "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –Ω–∞—à–µ–ª?\n"
#         "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
#         reply_markup=keyboard
#     )
#     await state.set_state(ConfirmDeleteState.confirm_income_delete)
#
#
# @router.callback_query(ConfirmDeleteState.confirm_outer_delete, F.data == "confirm_outer_delete")
# async def process_outer_delete(callback: CallbackQuery, state: FSMContext):
#     await db.remove_outer_companion(callback.from_user.id)
#     await callback.message.edit_text(
#         "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã –Ω–∞—à–ª–∏, —É–¥–∞–ª–µ–Ω –∏–∑ –í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
#         reply_markup=get_companion_close_keyboard()
#     )
#     await state.clear()
#
#
# @router.callback_query(ConfirmDeleteState.confirm_income_delete, F.data == "confirm_income_delete")
# async def process_income_delete(callback: CallbackQuery, state: FSMContext):
#     await db.remove_income_companion(callback.from_user.id)
#     await callback.message.edit_text(
#         "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –í–∞—Å –Ω–∞—à–µ–ª, —É–¥–∞–ª–µ–Ω –∏–∑ –í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
#         reply_markup=get_companion_close_keyboard()
#     )
#     await state.clear()


# @router.callback_query(F.data == "cancel_delete")
# async def cancel_delete(callback: CallbackQuery, state: FSMContext):
#     await callback.message.edit_text(
#         "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
#         reply_markup=get_companions_slots_keyboard()
#     )
#     await state.clear()


# @router.callback_query(F.data.startswith("remove_companion_confirm"))
# async def remove_companion_handler(callback: CallbackQuery, state: FSMContext):
#     """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è companion"""
#     data_parts = callback.data.split('_')
#     if len(data_parts) < 3:
#         await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
#         return
#
#     companion_id = int(data_parts[2])
#
#     # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
#     await state.update_data(
#         companion_id=companion_id
#     )
#
#
#     # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
#     keyboard = InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_companion_delete")],
#         [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_companion_delete")]
#     ])
#
#     await callback.message.answer(
#         f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?\n\n"
#         "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
#         reply_markup=keyboard
#     )
#     await state.set_state(ConfirmCompanionDeleteState.waiting_confirmation)



# @router.callback_query(F.data.startswith("back_to_profile_"))
# async def back_to_profile_handler(callback: CallbackQuery):
#     """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é companion"""
#     companion_id = int(callback.data.replace('back_to_profile_', ''))
#     companion = await db.get_companion_info(companion_id)
#
#     if companion:
#         # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø companion
#         user = await db.get_user(callback.from_user.id)
#
#         await show_companion_profile(callback, companion)
#     else:
#         await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
#         await callback.message.edit_text(
#             "üë• –í–∞—à–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏:",
#             reply_markup=get_companions_slots_keyboard()
#         )
# def get_companion_close_keyboard():
#     return InlineKeyboardMarkup(inline_keyboard=[
#         [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="back_to_companions")],
#     ])