from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import db
from keyboards.main import (
    get_settings_keyboard,
    get_boolean_choice_keyboard,
    get_main_menu_keyboard,
    get_gender_keyboard,
)
from handlers.start import RegistrationStates

router = Router()


class SettingsState(StatesGroup):
    waiting_for_city = State()
    waiting_for_city_only = State()
    waiting_for_photo_required = State()
    waiting_for_hide = State()


@router.callback_query(F.data == "settings_restart_profile")
async def settings_restart_profile(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:",
        reply_markup=get_gender_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_gender)


@router.callback_query(F.data == "settings_import_contact")
async def settings_import_contact(callback: CallbackQuery, state: FSMContext):
    user = callback.from_user
    if user.username:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –≤ –±–∞–∑—É
        await db.update_username(user.id, user.username)

        await callback.message.edit_text(
            f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
            f"–í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç: @{user.username}\n\n"
            f"–¢–µ–ø–µ—Ä—å, –µ—Å–ª–∏ –í–∞—à–∞ –∞–Ω–∫–µ—Ç–∞ –±—É–¥–µ—Ç –∫–æ–º—É-—Ç–æ\n"
            f"–∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞, —Ç–æ –ë–æ—Ç —Å–ø—Ä–æ—Å–∏—Ç —É –í–∞—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ\n"
            f"–Ω–∞ –ø–µ—Ä–µ–¥–∞—á—É –í–∞—à–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞.",
            reply_markup=get_settings_keyboard()
        )
    else:
        await callback.message.edit_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username!\n\n"
            "–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é:\n"
            "1. –ó–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram\n"
            "2. –í—ã–±–µ—Ä–∏—Ç–µ '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'\n"
            "3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è\n"
            "4. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="settings_import_contact")],
                [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="contact_import_cancel")]
            ])
        )

@router.callback_query(F.data == "contact_import_cancel")
async def contact_import_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_settings_keyboard()
    )
    await state.clear()


@router.callback_query(F.data == "settings_back")
async def settings_back(callback: CallbackQuery):
    menu_title = "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    await callback.message.edit_text(
        text=f"_____{menu_title}_____",
        reply_markup=get_main_menu_keyboard()
    )

@router.callback_query(F.data == "settings_city")
async def settings_city(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üèôÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="city_cancel")]
        ])
    )
    await state.set_state(SettingsState.waiting_for_city)


@router.message(SettingsState.waiting_for_city)
async def process_city(message: Message, state: FSMContext):
    city = message.text.strip()
    seeker_id = message.from_user.id # await db.get_seeker_id(message.from_user.id)

    await db.update_preferences(seeker_id, city=city)
    await message.answer(f"‚úÖ –ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {city}")
    await message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_settings_keyboard()
    )
    await state.clear()


@router.callback_query(F.data == "city_cancel")
async def city_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_settings_keyboard()
    )
    await state.clear()


@router.callback_query(F.data == "settings_city_only")
async def settings_city_only(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üåç –ò—Å–∫–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ —Ç–æ–ª—å–∫–æ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ?",
        reply_markup=get_boolean_choice_keyboard()
    )
    await state.set_state(SettingsState.waiting_for_city_only)


@router.callback_query(SettingsState.waiting_for_city_only, F.data.startswith("boolean_"))
async def process_city_only(callback: CallbackQuery, state: FSMContext):
    if callback.data == "boolean_cancel":
        await callback.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_settings_keyboard()
        )
        await state.clear()
        return

    is_city_only = callback.data == "boolean_yes"
    seeker_id = callback.from_user.id # await db.get_seeker_id(callback.from_user.id)

    await db.update_preferences(seeker_id, is_city_only=is_city_only)

    status = "–≤–∫–ª—é—á–µ–Ω" if is_city_only else "–≤—ã–∫–ª—é—á–µ–Ω"
    await callback.message.edit_text(f"‚úÖ –ü–æ–∏—Å–∫ —Ç–æ–ª—å–∫–æ –≤ –≥–æ—Ä–æ–¥–µ {status}")
    await callback.message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_settings_keyboard()
    )
    await state.clear()


@router.callback_query(F.data == "settings_photo_required")
async def settings_photo_required(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üì∏ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π?",
        reply_markup=get_boolean_choice_keyboard()
    )
    await state.set_state(SettingsState.waiting_for_photo_required)


@router.callback_query(SettingsState.waiting_for_photo_required, F.data.startswith("boolean_"))
async def process_photo_required(callback: CallbackQuery, state: FSMContext):
    if callback.data == "boolean_cancel":
        await callback.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_settings_keyboard()
        )
        await state.clear()
        return

    photo_required = callback.data == "boolean_yes"
    seeker_id = callback.from_user.id # await db.get_seeker_id(callback.from_user.id)

    await db.update_preferences(seeker_id, photo_required=photo_required)

    status = "–≤–∫–ª—é—á–µ–Ω" if photo_required else "–≤—ã–∫–ª—é—á–µ–Ω"
    await callback.message.edit_text(f"‚úÖ –ü–æ–∫–∞–∑ —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ç–æ {status}")
    await callback.message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_settings_keyboard()
    )
    await state.clear()


@router.callback_query(F.data == "settings_hide")
async def settings_hide(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üëÅÔ∏è –°–∫—Ä—ã—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –ø–æ–∏—Å–∫–∞? –í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ—è–≤–ª—è—Ç—å—Å—è —É –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.",
        reply_markup=get_boolean_choice_keyboard()
    )
    await state.set_state(SettingsState.waiting_for_hide)


@router.callback_query(SettingsState.waiting_for_hide, F.data.startswith("boolean_"))
async def process_hide(callback: CallbackQuery, state: FSMContext):
    if callback.data == "boolean_cancel":
        await callback.message.edit_text(
            "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=get_settings_keyboard()
        )
        await state.clear()
        return

    is_seekable = not (callback.data == "boolean_yes")  # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è is_seekable
    seeker_id = callback.from_user.id # await db.get_seeker_id(callback.from_user.id)

    await db.update_preferences(seeker_id, is_seekable=is_seekable)

    status = "—Å–∫—Ä—ã—Ç" if not is_seekable else "–≤–∏–¥–µ–Ω"
    await callback.message.edit_text(f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å {status} –≤ –ø–æ–∏—Å–∫–µ")
    await callback.message.answer(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_settings_keyboard()
    )
    await state.clear()


# @router.callback_query(F.data == "settings_remove_outer_companion")
# async def settings_remove_companion(callback: CallbackQuery):
#     await db.remove_outer_companion(callback.from_user.id)
#     await callback.answer("‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω")
#     await callback.message.edit_text(
#         "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã –Ω–∞—à–ª–∏, —É–¥–∞–ª–µ–Ω –∏–∑ –í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
#         reply_markup=get_settings_keyboard()
#     )
#
# @router.callback_query(F.data == "settings_remove_income_companion")
# async def settings_remove_income_companion(callback: CallbackQuery):
#     await db.remove_income_companion(callback.from_user.id)
#     await callback.answer("‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ —É–¥–∞–ª–µ–Ω")
#     await callback.message.edit_text(
#         "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –í–∞—Å –Ω–∞—à–µ–ª, —É–¥–∞–ª–µ–Ω –∏–∑ –í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
#         reply_markup=get_settings_keyboard()
#     )
#
# @router.callback_query(F.data == "settings_back")
# async def settings_back(callback: CallbackQuery):
#     await callback.message.edit_text(
#         "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
#         reply_markup=get_main_menu_keyboard()
#     )

