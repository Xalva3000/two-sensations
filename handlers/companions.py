from aiogram import Router, F
from aiogram.filters import BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from database import db
from LEXICON import TOPICS_LIST
from LEXICON.numbers import age_groups
from keyboards.main import get_companions_menu_keyboard, get_settings_keyboard

router = Router()

class ConfirmDeleteState(StatesGroup):
    confirm_outer_delete = State()
    confirm_income_delete = State()

class ConfirmCompanionDeleteState(StatesGroup):
    waiting_confirmation = State()

class IsReportUser(BaseFilter):
    """–§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ü–∏—Ñ—Ä—ã."""

    async def __call__(self, callback: CallbackQuery) -> bool:
        if "report" in callback.data:
            second_part = callback.data.split("_")[1]
            if second_part.isdigit():
                return True
        return False

class IsReportReason(BaseFilter):
    """–§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ü–∏—Ñ—Ä—ã."""

    async def __call__(self, callback: CallbackQuery) -> bool:
        if callback.data in ("report_spam", "report_content", "report_scam", "report_other", "report_cancel"):
            return True
        return False


def get_gender_text(gender_code):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∞"""
    if gender_code == 1:
        return "–ú—É–∂—Å–∫–æ–π"
    elif gender_code == 2:
        return "–ñ–µ–Ω—Å–∫–∏–π"
    else:
        return "–ù–µ —É–∫–∞–∑–∞–Ω"

def get_companion_close_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="back_to_companions")],
    ])

# class ConfirmCompanionDeleteState(StatesGroup):
#     waiting_confirmation = State()

# def get_companion_action_keyboard(companion_id):
#     return InlineKeyboardMarkup(inline_keyboard=[
#         [
#             InlineKeyboardButton(text="üëé", callback_data=f"decrease_balance_{companion_id}"),
#             InlineKeyboardButton(text="‚ö†Ô∏è REPORT", callback_data=f"report_{companion_id}"),
#             InlineKeyboardButton(text="üëç", callback_data=f"increase_balance_{companion_id}"),
#         ],
#         [
#             InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_companions")
#         ],
#     ])

# def get_companion_action_keyboard(companion_id, companion_type):
#     return InlineKeyboardMarkup(inline_keyboard=[
#         [
#             InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_{companion_type}_{companion_id}"),
#             InlineKeyboardButton(text="‚ö†Ô∏è REPORT", callback_data=f"report_{companion_id}")
#         ],
#         [InlineKeyboardButton(text="‚ûï –ù–∞–ø–∏—Å–∞—Ç—å", callback_data=f"message_{companion_id}")],
#         [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_companions")]
#     ])

def get_companion_action_keyboard(companion_id, companion_type):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å companion"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_{companion_type}_{companion_id}"),
            InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"report_{companion_id}")
        ],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_companions")]
    ])

@router.callback_query(F.data == "menu_view_outer_companion")
async def view_outer_companion(callback: CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    if not user or not user.get('outer_companion_telegram_id'):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –Ω–∞—à–ª–∏")
        return

    companion = await db.get_companion_info(user['outer_companion_telegram_id'])
    if not companion:
        await callback.answer("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await show_companion_profile(callback, companion, "outer")


@router.callback_query(F.data == "menu_view_income_companion")
async def view_income_companion(callback: CallbackQuery):
    user = await db.get_user(callback.from_user.id)
    if not user or not user.get('income_companion_telegram_id'):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –Ω–∞—à–µ–ª")
        return

    companion = await db.get_companion_info(user['income_companion_telegram_id'])
    if not companion:
        await callback.answer("–°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    await show_companion_profile(callback, companion, "income")


# async def show_companion_profile(callback: CallbackQuery, companion, companion_type):
#     topics_text = ", ".join([TOPICS_LIST[i - 1] for i in companion.get('topics', [])]) if companion.get(
#         'topics') else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"
#
#     profile_text = (
#         f"üë§ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n\n"
#         f"üìù –ò–º—è: {companion['first_name']}\n"
#         f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age_groups.get(companion['age'], '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
#         f"üë´ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if companion['gender'] == 1 else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
#         f"üèôÔ∏è –ì–æ—Ä–æ–¥: {companion.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
#         f"üìö –¢–µ–º—ã: {topics_text}\n"
#     )
#
#     if companion.get('about'):
#         profile_text += f"\nüìñ –û —Å–µ–±–µ:\n{companion['about']}\n"
#
#     keyboard = get_companion_action_keyboard(companion['telegram_id'])
#
#     if companion.get('photo_id'):
#         await callback.message.answer_photo(
#             companion['photo_id'],
#             caption=profile_text,
#             reply_markup=keyboard
#         )
#     else:
#         await callback.message.answer(profile_text, reply_markup=keyboard)

async def show_companion_profile(callback: CallbackQuery, companion, companion_type):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        if not companion:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = format_companion_profile(companion)

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = get_companion_action_keyboard(companion['telegram_id'], companion_type)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_companion_message(callback, companion, profile_text, keyboard)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è companion: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")


def format_companion_profile(companion):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n\n"
        f"üìù –ò–º—è: {companion.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age_groups.get(companion.get('age'), '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üë´ –ü–æ–ª: {get_gender_text(companion.get('gender'))}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {companion.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    )

    # –¢–µ–º—ã
    topics = companion.get('topics', [])
    if topics:
        valid_topics = [i for i in topics if 1 <= i <= len(TOPICS_LIST)]
        if valid_topics:
            topics_names = [TOPICS_LIST[i - 1] for i in valid_topics[:6]]
            text += f"üìö –¢–µ–º—ã: {', '.join(topics_names)}"
            if len(valid_topics) > 6:
                text += f" (+{len(valid_topics) - 6})"
            text += "\n"

    # –û —Å–µ–±–µ
    if companion.get('about'):
        about_me = companion['about']
        if len(about_me) > 200:
            about_me = about_me[:200] + "..."
        text += f"\nüìñ –û —Å–µ–±–µ:\n{about_me}\n"

    return text




async def send_companion_message(callback, companion, profile_text, keyboard):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""
    photo_id = companion.get('photo_id')
    is_photo_confirmed = companion.get('is_photo_confirmed', False)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    can_send_photo = photo_id and is_photo_confirmed

    if can_send_photo:
        try:
            await callback.message.answer_photo(
                photo_id,
                caption=profile_text,
                reply_markup=keyboard
            )
            return
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ companion: {e}")
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (fallback)
    await callback.message.answer(
        profile_text,
        reply_markup=keyboard
    )

# @router.callback_query(F.data.startswith("report_"))
# async def report_companion(callback: CallbackQuery):
#     companion_id = int(callback.data.replace('report_', ''))
#     # –õ–æ–≥–∏–∫–∞ —Ä–µ–ø–æ—Ä—Ç–∞
#     await callback.answer("–†–µ–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

@router.callback_query(F.data.startswith("decrease_balance_"))
async def decrease_companion_balance(callback: CallbackQuery):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ id —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    companion_id = int(callback.data.replace('decrease_balance_', ''))
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await db.decrease_balance(companion_id)
    await callback.answer("–û—á–∫–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —Ç–∞—é—Ç!")

@router.callback_query(F.data.startswith("increase_balance_"))
async def increase_companion_balance(callback: CallbackQuery):
    # –ø–æ–ª—É—á–µ–Ω–∏–µ id —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    companion_id = int(callback.data.replace('increase_balance_', ''))
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await db.increase_balance(companion_id)
    await callback.answer("–û—á–∫–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –≤–∑–ª–µ—Ç–∞—é—Ç!")

# @router.callback_query(F.data.startswith("message_"))
# async def message_companion(callback: CallbackQuery):
#     companion_id = int(callback.data.replace('message_', ''))
#     companion = await db.get_user(companion_id)
#     if companion and companion.get('username'):
#         await callback.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ @{companion['username']}")
#     else:
#         await callback.answer("Username –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω")


@router.callback_query(F.data == "back_to_companions")
async def back_to_companions(callback: CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è

    # await callback.message.answer(
    #     "üë• –í–∞—à–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏:",
    #     reply_markup=get_companions_menu_keyboard()
    # )


@router.callback_query(F.data == "settings_remove_outer_companion")
async def confirm_remove_outer_companion(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_outer_delete")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
    ])

    await callback.message.edit_text(
        "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –Ω–∞—à–ª–∏?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=keyboard
    )
    await state.set_state(ConfirmDeleteState.confirm_outer_delete)


@router.callback_query(F.data == "settings_remove_income_companion")
async def confirm_remove_income_companion(callback: CallbackQuery, state: FSMContext):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_income_delete")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_delete")]
    ])

    await callback.message.edit_text(
        "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –Ω–∞—à–µ–ª?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=keyboard
    )
    await state.set_state(ConfirmDeleteState.confirm_income_delete)


@router.callback_query(ConfirmDeleteState.confirm_outer_delete, F.data == "confirm_outer_delete")
async def process_outer_delete(callback: CallbackQuery, state: FSMContext):
    await db.remove_outer_companion(callback.from_user.id)
    await callback.message.edit_text(
        "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –í—ã –Ω–∞—à–ª–∏, —É–¥–∞–ª–µ–Ω –∏–∑ –í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
        reply_markup=get_companion_close_keyboard()
    )
    await state.clear()


@router.callback_query(ConfirmDeleteState.confirm_income_delete, F.data == "confirm_income_delete")
async def process_income_delete(callback: CallbackQuery, state: FSMContext):
    await db.remove_income_companion(callback.from_user.id)
    await callback.message.edit_text(
        "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –í–∞—Å –Ω–∞—à–µ–ª, —É–¥–∞–ª–µ–Ω –∏–∑ –í–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è",
        reply_markup=get_companion_close_keyboard()
    )
    await state.clear()


@router.callback_query(F.data == "cancel_delete")
async def cancel_delete(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:",
        reply_markup=get_companions_menu_keyboard()
    )
    await state.clear()


@router.callback_query(F.data.startswith("remove_"))
async def remove_companion_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è companion"""
    data_parts = callback.data.split('_')
    if len(data_parts) < 3:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞")
        return

    companion_type = data_parts[1]
    companion_id = int(data_parts[2])

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ state –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await state.update_data(
        companion_type=companion_type,
        companion_id=companion_id
    )

    # –¢–µ–∫—Å—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ companion
    if companion_type == "outer":
        companion_text = "–∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –Ω–∞—à–ª–∏"
    else:  # income
        companion_text = "–∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –Ω–∞—à–µ–ª"

    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_companion_delete")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_companion_delete")]
    ])

    await callback.message.answer(
        f"‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ {companion_text}?\n\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –í—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç —Å —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.",
        reply_markup=keyboard
    )
    await state.set_state(ConfirmCompanionDeleteState.waiting_confirmation)


@router.callback_query(ConfirmCompanionDeleteState.waiting_confirmation, F.data == "confirm_companion_delete")
async def confirm_companion_delete(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è companion"""
    data = await state.get_data()
    companion_type = data.get('companion_type')
    companion_id = data.get('companion_id')

    if not companion_type or not companion_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
        return

    # –£–¥–∞–ª—è–µ–º companion –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    if companion_type == "outer":
        await db.remove_outer_companion(callback.from_user.id)
        success_message = "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –Ω–∞—à–ª–∏, —É–¥–∞–ª–µ–Ω"
    else:  # income
        await db.remove_income_companion(callback.from_user.id)
        success_message = "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –Ω–∞—à–µ–ª, —É–¥–∞–ª–µ–Ω"

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.message.edit_text(
        f"{success_message}\n\n"
        "–ö–æ–Ω—Ç–∞–∫—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.",
        reply_markup=get_companion_close_keyboard()
    )
    await state.clear()


@router.callback_query(ConfirmCompanionDeleteState.waiting_confirmation, F.data == "cancel_companion_delete")
async def cancel_companion_delete(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è companion"""
    data = await state.get_data()
    companion_id = data.get('companion_id')
    companion_type = data.get('companion_type')

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –ø—Ä–æ—Ñ–∏–ª—è companion
    companion = await db.get_companion_info(companion_id)
    if companion:
        await show_companion_profile(callback, companion, companion_type)
    else:
        await callback.message.edit_text(
            "üë• –í–∞—à–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏:",
            reply_markup=get_companion_close_keyboard()
        )

    await state.clear()
    await callback.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")



@router.callback_query(F.data.startswith("back_to_profile_"))
async def back_to_profile_handler(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é companion"""
    companion_id = int(callback.data.replace('back_to_profile_', ''))
    companion = await db.get_companion_info(companion_id)

    if companion:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø companion
        user = await db.get_user(callback.from_user.id)
        companion_type = "outer" if user and user.get('outer_companion_telegram_id') == companion_id else "income"

        await show_companion_profile(callback, companion, companion_type)
    else:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.message.edit_text(
            "üë• –í–∞—à–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏:",
            reply_markup=get_companions_menu_keyboard()
        )


@router.callback_query(IsReportUser())
async def report_companion_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∂–∞–ª–æ–±—ã"""
    companion_id = int(callback.data.replace('report_', ''))

    await state.update_data(reported_companion_id=companion_id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üö´ –°–ø–∞–º", callback_data="report_spam")],
        [InlineKeyboardButton(text="üìµ –ù–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="report_content")],
        [InlineKeyboardButton(text="üë§ –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="report_scam")],
        [InlineKeyboardButton(text="‚ùå –î—Ä—É–≥–æ–µ", callback_data="report_other")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="report_cancel")]
    ])

    await callback.message.answer(
        "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:",
        reply_markup=keyboard
    )


@router.callback_query(IsReportReason())
async def process_report_reason(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–±—ã"""
    report_reason = callback.data

    reasons = {
        "report_spam": "üö´ –°–ø–∞–º",
        "report_content": "üìµ –ù–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
        "report_scam": "üë§ –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ",
        "report_other": "‚ùå –î—Ä—É–≥–æ–µ"
    }

    if report_reason in reasons:
        data = await state.get_data()
        companion_id = data.get('reported_companion_id')

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∂–∞–ª–æ–±—É –≤ –±–∞–∑—É
        # await db.save_report(callback.from_user.id, companion_id, reasons[report_reason])

        await callback.message.edit_text(
            f"‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {reasons[report_reason]}\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∂–∞–ª–æ–±—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"companions_cancel")]
            ])
        )
        await state.clear()

    elif report_reason == "report_cancel":
        await callback.message.delete()


@router.callback_query(F.data.startswith("companions_cancel"))
async def companions_cancel(callback: CallbackQuery):

    await callback.message.delete()
