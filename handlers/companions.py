from aiogram import Router, F
from aiogram.filters import BaseFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from database import db
from LEXICON import TOPICS_LIST
from LEXICON.numbers import age_groups
from keyboards.main import get_companions_slots_keyboard

router = Router()


def get_companion_close_keyboard():
     return InlineKeyboardMarkup(inline_keyboard=[
         [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="companion_close")],
     ])


class ConfirmCompanionDeleteState(StatesGroup):
    waiting_confirmation = State()

class IsReportUser(BaseFilter):
    """–§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ü–∏—Ñ—Ä—ã."""

    async def __call__(self, callback: CallbackQuery) -> bool:
        if "report" in callback.data:
            second_part = callback.data.split("_")[1]
            if second_part.isdigit():
                return True
        return False

class IsReportReason(BaseFilter):
    """–§–∏–ª—å—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ü–∏—Ñ—Ä—ã."""

    async def __call__(self, callback: CallbackQuery) -> bool:
        if callback.data in ("report_spam", "report_content", "report_scam", "report_other", "report_cancel"):
            return True
        return False


def get_gender_text(gender_code):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–∞"""
    if gender_code == 1:
        return "–ú—É–∂—Å–∫–æ–π"
    elif gender_code == 2:
        return "–ñ–µ–Ω—Å–∫–∏–π"
    else:
        return "–ù–µ —É–∫–∞–∑–∞–Ω"



def get_companion_action_keyboard(companion_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π —Å companion"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûñ –£–¥–∞–ª–∏—Ç—å", callback_data=f"remove_companion_{companion_id}"),
            InlineKeyboardButton(text="‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è", callback_data=f"report_{companion_id}"),
        ],
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="companion_close")]
    ])


@router.callback_query(F.data =="menu_companions")
async def menu_companions(callback: CallbackQuery):
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    slots = await db.get_connections_by_slots(user_id)
    print(slots)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    total_slots = len(slots)
    occupied_slots = sum(1 for slot in slots if not slot['is_empty'])

    text = (
        f"üë• –ú–æ–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏:\n\n"
        f"üìä –ó–∞–Ω—è—Ç–æ: {occupied_slots}/{total_slots} —Å–ª–æ—Ç–æ–≤\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:"
    )

    await callback.message.edit_text(
        text,
        reply_markup=get_companions_slots_keyboard(slots)
    )


@router.callback_query(F.data.startswith("companion_close"))
async def companion_close(callback: CallbackQuery):
    await callback.message.delete()




async def show_companion_profile(callback: CallbackQuery, companion):
    topics_text = ", ".join([TOPICS_LIST[i - 1] for i in companion.get('topics', [])]) if companion.get(
        'topics') else "–ù–µ —É–∫–∞–∑–∞–Ω—ã"

    profile_text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n\n"
        f"üìù –ò–º—è: {companion['first_name']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age_groups.get(companion['age'], '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üë´ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if companion['gender'] == 1 else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {companion.get('city') or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"üìö –¢–µ–º—ã: {topics_text}\n"
        f"ü™¢ –í–∑–∞–∏–º–Ω–æ—Å—Ç—å: {companion.get('is_mutual')}"
    )

    if companion.get('about'):
        profile_text += f"\nüìñ –û —Å–µ–±–µ:\n{companion['about']}\n"

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —É–¥–∞–ª–µ–Ω–∏–µ/—Ä–µ–ø–æ—Ä—Ç/–∑–∞–∫—Ä—ã—Ç—å
    reply_markup = get_companion_action_keyboard(companion['telegram_id'])

    if companion.get('photo_id'):
        await callback.message.answer_photo(
            companion['photo_id'],
            caption=profile_text,
            reply_markup=reply_markup
        )
    else:
        await callback.message.answer(
            profile_text,
            reply_markup=reply_markup
        )



def format_companion_profile(companion, companion_type):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"""

    is_mutual = False
    if companion_type == "outer":
        is_mutual = companion.get('outer_companion_mutual', False)
    else:
        is_mutual = companion.get('income_companion_mutual', False)

    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∑–∞–∏–º–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å
    mutual_status = "‚úÖ –í–∑–∞–∏–º–Ω–∞—è —Å–≤—è–∑—å" if is_mutual else "‚ö™ –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"

    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n\n"
        f"üìù –ò–º—è: {companion.get('first_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age_groups.get(companion.get('age'), '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üë´ –ü–æ–ª: {get_gender_text(companion.get('gender'))}\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {companion.get('city', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üîó –°—Ç–∞—Ç—É—Å: {mutual_status}\n"
    )

    # –¢–µ–º—ã
    topics = companion.get('topics', [])
    if topics:
        valid_topics = [i for i in topics if 1 <= i <= len(TOPICS_LIST)]
        if valid_topics:
            topics_names = [TOPICS_LIST[i - 1] for i in valid_topics[:6]]
            text += f"üìö –¢–µ–º—ã: {', '.join(topics_names)}"
            if len(valid_topics) > 6:
                text += f" (+{len(valid_topics) - 6})"
            text += "\n"

    # –û —Å–µ–±–µ
    if companion.get('about'):
        about_me = companion['about']
        if len(about_me) > 200:
            about_me = about_me[:200] + "..."
        text += f"\nüìñ –û —Å–µ–±–µ:\n{about_me}\n"

    return text




@router.callback_query(F.data.startswith("remove_companion_"))
async def confirm_remove_companion(callback: CallbackQuery, state: FSMContext):
    companion_id = int(callback.data.replace("remove_companion_", ""))
    await state.update_data(companion_id=companion_id)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="confirm_companion_delete")],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data="cancel_companion_delete")]
    ])

    await callback.message.answer(
        "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=keyboard
    )
    await state.set_state(ConfirmCompanionDeleteState.waiting_confirmation)

@router.callback_query(ConfirmCompanionDeleteState.waiting_confirmation, F.data == "confirm_companion_delete")
async def confirm_companion_delete(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è companion"""
    data = await state.get_data()
    seeker_id = callback.from_user.id
    companion_id = data.get('companion_id')

    # –£–¥–∞–ª—è–µ–º companion –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    await db.remove_connection(seeker_id, companion_id)
    success_message = "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã –Ω–∞—à–ª–∏, —É–¥–∞–ª–µ–Ω"


    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await callback.message.edit_text(
        f"{success_message}\n\n"
        "–ö–æ–Ω—Ç–∞–∫—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.",
        reply_markup=get_companion_close_keyboard()
    )
    await state.clear()


@router.callback_query(ConfirmCompanionDeleteState.waiting_confirmation, F.data == "cancel_companion_delete")
async def cancel_companion_delete(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è companion"""
    await state.clear()
    await callback.answer("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.delete()



@router.callback_query(IsReportUser())
async def report_companion_handler(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∂–∞–ª–æ–±—ã"""
    companion_id = int(callback.data.replace('report_', ''))

    await state.update_data(reported_companion_id=companion_id)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üö´ –°–ø–∞–º", callback_data="report_spam")],
        [InlineKeyboardButton(text="üìµ –ù–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç", callback_data="report_content")],
        [InlineKeyboardButton(text="üë§ –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ", callback_data="report_scam")],
        [InlineKeyboardButton(text="‚ùå –î—Ä—É–≥–æ–µ", callback_data="report_other")],
        [InlineKeyboardButton(text="‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="report_cancel")]
    ])

    await callback.message.answer(
        "‚ö†Ô∏è –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:",
        reply_markup=keyboard
    )


@router.callback_query(IsReportReason())
async def process_report_reason(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–±—ã"""
    report_reason = callback.data

    reasons = {
        "report_spam": "üö´ –°–ø–∞–º",
        "report_content": "üìµ –ù–µ–ø—Ä–∏–µ–º–ª–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç",
        "report_scam": "üë§ –ú–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ",
        "report_other": "‚ùå –î—Ä—É–≥–æ–µ"
    }

    if report_reason in reasons:
        data = await state.get_data()
        companion_id = data.get('reported_companion_id')

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∂–∞–ª–æ–±—É –≤ –±–∞–∑—É
        # await db.save_report(callback.from_user.id, companion_id, reasons[report_reason])

        await callback.message.edit_text(
            f"‚úÖ –ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {reasons[report_reason]}\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç –≤–∞—à—É –∂–∞–ª–æ–±—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data=f"companions_cancel")]
            ])
        )
        await state.clear()

    elif report_reason == "report_cancel":
        await callback.message.delete()


@router.callback_query(F.data.startswith("companions_cancel"))
async def companions_cancel(callback: CallbackQuery):

    await callback.message.delete()


@router.callback_query(F.data.startswith("companion_slot_"))
async def handle_companion_slot(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–Ω—è—Ç—ã–π —Å–ª–æ—Ç"""
    companion_id = int(callback.data.replace('companion_slot_', ''))

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ
    # """
    #     SELECT
    #         s.*, p.*,
    #         t.topics_mask
    #     FROM seekers s
    #         LEFT JOIN preferences p ON s.telegram_id = p.seeker_id
    #         LEFT JOIN topics t ON s.telegram_id = t.seeker_id
    #     WHERE s.telegram_id = $1
    # """
    companion = await db.get_companion_info(companion_id)
    if not companion:
        await callback.answer("‚ùå –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–≤—è–∑–∏
    # user_connections = await db.get_connections(callback.from_user.id)
    is_mutual = await db.is_mutual_connection(callback.from_user.id, companion.get('telegram_id'))
    companion['is_mutual'] = is_mutual
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º
    await show_companion_profile(callback, companion)


@router.callback_query(F.data.startswith("empty_slot_"))
async def handle_empty_slot(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –ø—É—Å—Ç–æ–π —Å–ª–æ—Ç"""
    slot_number = int(callback.data.replace('empty_slot_', ''))

    await callback.answer(
        f"üì≠ –°–ª–æ—Ç {slot_number} –ø—É—Å—Ç–æ–π\n"
        "–ù–∞–π–¥–∏—Ç–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫!",
        show_alert=True
    )


@router.callback_query(F.data == "buy_slot")
async def buy_slot_handler(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫—É–ø–∫–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–ª–æ—Ç–∞"""
    user_id = callback.from_user.id
    user = await db.get_user(user_id)

    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return

    current_slots = user.get('companion_slots', 1)

    if current_slots >= 10:
        await callback.answer("‚úÖ –£ –≤–∞—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ—Ç–æ–≤ (10)")
        return

    # –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏ —Å–ª–æ—Ç–∞
    slot_cost = 200  # –±–∞–ª–ª–æ–≤
    new_slots_count = current_slots + 1

    if user.get('balance', 0) >= slot_cost:
        # –°–ø–∏—Å–∞–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤ –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–ª–æ—Ç–æ–≤
        await db.deduct_balance(user_id, slot_cost)
        await db.upgrade_slots_amouunt(user_id, new_slots_count)

        await callback.answer(f"‚úÖ –ö—É–ø–ª–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç! –¢–µ–ø–µ—Ä—å —Å–ª–æ—Ç–æ–≤: {new_slots_count}")
        await menu_companions(callback)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    else:
        await callback.answer(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤. –ù—É–∂–Ω–æ: {slot_cost} –±–∞–ª–ª–æ–≤\n"
            f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user.get('balance', 0)} –±–∞–ª–ª–æ–≤",
            show_alert=True
        )

