from aiogram import Router, F
from aiogram.types import Message, CallbackQuery

from LEXICON import TOPICS_LIST
from LEXICON.numbers import age_groups
from database import db
from keyboards.main import get_profile_action_keyboard

router = Router()

# –°–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è



@router.callback_query(F.data == "menu_search")
async def menu_search(callback: CallbackQuery):
    user_id = callback.from_user.id
    await find_match(callback.message, user_id)


async def set_outer_companion(user_id: int, new_companion_id: int):
    await db.set_outer_companion(user_id, new_companion_id)

async def find_match(message: Message, user_id: int):
    user = await db.get_user(user_id)

    if not user or not user.get('gender') or not user.get('age'):
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É!")
        return

    match = await db.get_random_user(user_id)
    if not match:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    match_topics = match.get('topics', [])
    topics_text = ""
    if match_topics:
        topics_names = [TOPICS_LIST[i - 1] for i in match_topics if 1 <= i <= 20]
        topics_text = f"üìù –¢–µ–º—ã: {', '.join(topics_names)}"

    caption = (
        f"üë§ {match['first_name']}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age_groups.get(match['age'], '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üë´ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if match['gender'] == 1 else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
    )

    if match.get('city'):
        caption += f"üèôÔ∏è –ì–æ—Ä–æ–¥: {match['city']}\n"

    if topics_text:
        caption += f"{topics_text}\n"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å FSM –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
    photo = match.get('photo_id', match['photo_id'])
    if photo:
        await message.answer_photo(
            photo,
            caption=caption,
            reply_markup=get_profile_action_keyboard(match['telegram_id'])
        )
    else:
        await message.answer(
            text=caption,
            reply_markup=get_profile_action_keyboard(match['telegram_id'])
        )


@router.callback_query(F.data.startswith("reject_profile_"))
async def reject_profile(callback: CallbackQuery):

    user_id = callback.from_user.id # await db.get_seeker_id(callback.from_user.id)
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    new_companion_id = int(callback.data.replace('reject_profile_', ''))

    await callback.answer("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    await callback.message.delete()

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∞–Ω–∫–µ—Ç—É
    # await find_match(callback.message, user_id)


@router.callback_query(F.data.startswith("accept_outer_profile_"))
async def accept_outer_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    # –ø–æ–ª—É—á–µ–Ω–∏–µ id –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    new_companion_id = int(callback.data.replace('accept_outer_profile_', ''))
    await set_outer_companion(user_id, new_companion_id)
    # –ó–¥–µ—Å—å –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    await callback.answer("–ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    await callback.message.delete()
    await callback.message.answer(
        "–í–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @username\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –¥–ª—è –æ–±—â–µ–Ω–∏—è!"
    )
