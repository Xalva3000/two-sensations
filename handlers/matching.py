from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from LEXICON import TOPICS_LIST
from LEXICON.numbers import age_groups
from database import db
from keyboards.main import get_profile_action_keyboard

router = Router()

# –°–ø–∏—Å–æ–∫ —Ç–µ–º –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è

def get_matching_close_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="matching_close")]
    ])

@router.callback_query(F.data == "menu_search")
async def menu_search(callback: CallbackQuery):
    user_id = callback.from_user.id
    await find_match(callback.message, user_id)


async def find_match(message: Message, user_id: int):
    try:
        user = await db.get_user(user_id)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å –∞–Ω–∫–µ—Ç—ã
        required_fields = ['gender', 'age', 'interested_age']
        if not user or any(not user.get(field) for field in required_fields):
            await message.answer(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø–æ–ª–Ω–æ—Å—Ç—å—é!\n"
                "–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å: –ø–æ–ª, –≤–æ–∑—Ä–∞—Å—Ç –∏ –∂–µ–ª–∞–µ–º—ã–π –≤–æ–∑—Ä–∞—Å—Ç"
            )
            return

        match = await db.get_random_user(user_id)

        if not match:
            await message.answer(
                "üëÄ –ü–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–Ω–∫–µ—Ç.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞\n"
                "‚Ä¢ –†–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞\n"
                "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–∑–∂–µ",
                reply_markup=get_matching_close_keyboard(),
            )
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è
        profile_text = format_profile_text(match)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        await send_profile_message(message, match, profile_text)

    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def format_profile_text(match):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    text = (
        f"üë§ {match.get('first_name', '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}\n"
        f"üë´ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if match.get('gender') == 1 else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age_groups.get(match.get('age'), '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üéØ –ò—â—É –≤–æ–∑—Ä–∞—Å—Ç: {age_groups.get(match.get('interested_age'), '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
    )

    if match.get('city'):
        text += f"üèôÔ∏è –ì–æ—Ä–æ–¥: {match['city']}\n"

    if match.get('about'):
        text += f"\nüìñ –û —Å–µ–±–µ:\n{match['about']}\n"

    # –¢–µ–º—ã
    match_topics = match.get('topics', [])
    if match_topics:
        topics_names = [TOPICS_LIST[i - 1] for i in match_topics if 1 <= i <= len(TOPICS_LIST)]
        if topics_names:
            text += f"\nüéØ –û—â—É—â–µ–Ω–∏—è: {', '.join(topics_names[:8])}"  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 —Ç–µ–º
            if len(topics_names) > 8:
                text += f" –∏ –µ—â—ë {len(topics_names) - 8}..."

    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    # username = match.get('username')
    # if username:
    #     text += f"\nüë§ @{username}"

    return text


async def send_profile_message(message, match, profile_text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º"""
    photo_id = match.get('photo_id')
    photo_confirmed = match.get('is_photo_confirmed')

    if photo_confirmed and photo_id:
        try:
            await message.answer_photo(
                photo_id,
                caption=profile_text,
                reply_markup=get_profile_action_keyboard(match['telegram_id'])
            )
            return
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}")

    # Fallback: —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        text=profile_text,
        reply_markup=get_profile_action_keyboard(match['telegram_id'])
    )


@router.callback_query(F.data.startswith("reject_profile_"))
async def reject_profile(callback: CallbackQuery):

    # user_id = callback.from_user.id
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    # new_companion_id = int(callback.data.replace('reject_profile_', ''))

    await callback.answer("–ê–Ω–∫–µ—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞")
    await callback.message.delete()



# @router.callback_query(F.data.startswith("accept_outer_profile_"))
# async def accept_outer_profile(callback: CallbackQuery):
#     # –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–µ–≥–æ id
#     user_id = callback.from_user.id
#     # –ø–æ–ª—É—á–µ–Ω–∏–µ id –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
#     new_companion_id = int(callback.data.replace('accept_outer_profile_', ''))
#
#     # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–π–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–≤–æ–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∏
#     await db.add_connection(user_id, new_companion_id)
#     await callback.answer("–ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
#     await callback.message.delete()
#     await callback.message.answer(
#         "–í–æ—Ç –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @username\n"
#         "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∏–º –¥–ª—è –æ–±—â–µ–Ω–∏—è!"
#     )

@router.callback_query(F.data.startswith("matching_close"))
async def matching_close(callback: CallbackQuery):
    await callback.message.delete()

