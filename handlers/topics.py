from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database import db
from keyboards.main import get_topics_keyboard, get_topics_menu_keyboard, get_main_menu_keyboard
from aiogram.fsm.state import State, StatesGroup

router = Router()


class TopicsState(StatesGroup):
    editing_topics = State()


@router.callback_query(F.data == "menu_topics")
async def menu_topics(callback: CallbackQuery):
    await callback.message.edit_text(
        "üé≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.",
        reply_markup=get_topics_menu_keyboard()
    )


@router.callback_query(F.data == "topics_back_to_main")
async def topics_back_to_main(callback: CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )


@router.callback_query(F.data == "topics_edit")
async def topics_edit(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    seeker_id = callback.from_user.id #  await db.get_seeker_id(callback.from_user.id)
    selected_topics = await db.get_user_topics(seeker_id)

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ —Ç–µ–º—ã (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):\n"
        "‚úÖ - —Ç–µ–º–∞ –≤—ã–±—Ä–∞–Ω–∞\n"
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ç–µ–º—É, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä\n\n"
        f"–í—ã–±—Ä–∞–Ω–æ —Ç–µ–º: {len(selected_topics)}/20",
        reply_markup=get_topics_keyboard(selected_topics)
    )
    await state.set_state(TopicsState.editing_topics)
    await state.update_data(selected_topics=selected_topics)


@router.callback_query(TopicsState.editing_topics, F.data.startswith("topic_"))
async def process_topic_selection(callback: CallbackQuery, state: FSMContext):
    topic_number = int(callback.data.split("_")[1])
    data = await state.get_data()
    selected_topics = data.get("selected_topics", [])

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Ç–µ–º—É
    if topic_number in selected_topics:
        selected_topics.remove(topic_number)
        action = "—É–¥–∞–ª–µ–Ω–∞"
    else:
        selected_topics.append(topic_number)
        action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞"

    await state.update_data(selected_topics=selected_topics)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=get_topics_keyboard(selected_topics)
    )
    await callback.answer(f"–¢–µ–º–∞ {action}")


@router.callback_query(TopicsState.editing_topics, F.data == "topics_save")
async def topics_save(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_topics = data.get("selected_topics", [])
    seeker_id = callback.from_user.id  # await db.get_seeker_id(callback.from_user.id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ —Ç–µ–º—ã –≤ –±–∞–∑—É
    for topic_num in range(1, 21):
        value = topic_num in selected_topics
        await db.update_topic(seeker_id, topic_num, value)

    await callback.message.edit_text(
        f"‚úÖ –¢–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í—ã–±—Ä–∞–Ω–æ —Ç–µ–º: {len(selected_topics)}\n"
        "–¢–µ–ø–µ—Ä—å –º—ã —Å–º–æ–∂–µ–º –ª—É—á—à–µ –ø–æ–¥–±–∏—Ä–∞—Ç—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤ –ø–æ –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º.",
        reply_markup=get_topics_menu_keyboard()
    )
    await state.clear()
    await callback.answer("–¢–µ–º—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


@router.callback_query(TopicsState.editing_topics, F.data == "topics_back")
async def topics_back(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üé≠ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–∞–º–∏ –¥–ª—è –æ–±—â–µ–Ω–∏—è:",
        reply_markup=get_topics_menu_keyboard()
    )
    await state.clear()