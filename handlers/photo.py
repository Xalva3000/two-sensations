from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import db
from keyboards.main import get_main_menu_keyboard, get_photo_keyboard, get_settings_keyboard

router = Router()


class PhotoState(StatesGroup):
    waiting_for_photo = State()


@router.callback_query(F.data == "menu_photo")
async def menu_photo(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ:",
        reply_markup=get_photo_keyboard(),
    )
    await state.set_state(PhotoState.waiting_for_photo)


# @router.message(PhotoState.waiting_for_photo, F.photo)
# async def process_photo(message: Message, state: FSMContext):
#     photo_id = message.photo[-1].file_id
#     seeker_id = message.from_user.id # await db.get_seeker_id(message.from_user.id)
#
#     await db.add_photo(seeker_id, photo_id)
#     await message.answer("‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
#     await message.answer(
#         "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
#         reply_markup=get_main_menu_keyboard()
#     )
#     await state.clear()


@router.message(PhotoState.waiting_for_photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    seeker_id = message.from_user.id

    await db.add_photo(seeker_id, photo_id)

    await message.answer(
        "‚úÖ –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
        "–í–∞—à–µ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. "
        "–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤.\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ —Ñ–æ—Ç–æ –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ.",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()

@router.callback_query(PhotoState.waiting_for_photo, F.data == "photo_cancel")
async def photo_cancel(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "_____‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏_____",
        reply_markup=get_settings_keyboard()
    )
    await state.clear()

@router.callback_query(F.data == "photo_close")
async def photo_close(callback: CallbackQuery, state: FSMContext):
    try:
        await state.clear()
        await callback.message.delete()
    except Exception as e:
        print(e)
