from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from LEXICON import age_groups
from database import db
from keyboards.main import (
    get_gender_keyboard,
    get_age_keyboard,
    get_interested_age_keyboard,
    get_main_menu_keyboard,
    get_topics_keyboard,
)

router = Router()


class RegistrationStates(StatesGroup):
    waiting_for_topics = State()  # –ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º –≤—ã–±–∏—Ä–∞–µ–º —Ç–µ–º—ã
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_interested_age = State()


@router.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    user = await db.get_user(message.from_user.id)

    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.add_user(
            telegram_id=message.from_user.id,
            username=message.from_user.username,
            first_name=message.from_user.first_name
        )

        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º username –µ—Å–ª–∏ –µ—Å—Ç—å
        if message.from_user.username:
            await db.update_username(message.from_user.id, message.from_user.username)

        # –ù–∞—á–∏–Ω–∞–µ–º —Å –í–´–ë–û–†–ê –¢–ï–ú (–ø–µ—Ä–≤—ã–π —à–∞–≥)
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –∫ –ë–æ—Ç—É –∑–Ω–∞–∫–æ–º—Å—Ç–≤ –ø–æ –æ–±—â–∏–º –æ—â—É—â–µ–Ω–∏—è–º!\n\n"
            "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ª—é–±–∏–º—ã—Ö –æ—â—É—â–µ–Ω–∏–π, –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –ø–æ–∏—Å–∫–∞:\n"
            "(–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∞–Ω–∫–µ—Ç—ã 1/4)",
            reply_markup=get_topics_keyboard(is_registration=True)
        )
        await state.set_state(RegistrationStates.waiting_for_topics)
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await message.answer(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=get_main_menu_keyboard()
        )


@router.callback_query(RegistrationStates.waiting_for_topics, F.data.startswith("topic_"))
async def process_topic_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–µ–º (–ø–µ—Ä–≤—ã–π —à–∞–≥)"""
    topic_index = int(callback.data.split("_")[1])
    data = await state.get_data()
    selected_topics = data.get("selected_topics", [])

    # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ —É–¥–∞–ª—è–µ–º —Ç–µ–º—É
    if topic_index in selected_topics:
        selected_topics.remove(topic_index)
        action = "—É–¥–∞–ª–µ–Ω–æ"
    else:
        selected_topics.append(topic_index)
        action = "–¥–æ–±–∞–≤–ª–µ–Ω–æ"

    await state.update_data(selected_topics=selected_topics)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_reply_markup(
        reply_markup=get_topics_keyboard(selected_topics, is_registration=True)
    )
    await callback.answer(f"–û—â—É—â–µ–Ω–∏–µ {action}")


@router.callback_query(RegistrationStates.waiting_for_topics, F.data == "topics_save")
async def save_topics_and_continue(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—ã –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞"""
    data = await state.get_data()
    selected_topics = data.get("selected_topics", [])

    if not selected_topics:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ—â—É—â–µ–Ω–∏–µ!")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–º—ã –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π state
    await state.update_data(selected_topics=selected_topics)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –ø–æ–ª–∞
    await callback.message.edit_text("‚úÖ –û—â—É—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:\n(–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∞–Ω–∫–µ—Ç—ã 2/4)")
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª:",
        reply_markup=get_gender_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_gender)


@router.callback_query(RegistrationStates.waiting_for_topics, F.data == "topics_clear")
async def clear_topics(callback: CallbackQuery, state: FSMContext):
    """–û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º"""
    await state.update_data(selected_topics=[])
    await callback.message.edit_reply_markup(
        reply_markup=get_topics_keyboard([])
    )
    await callback.answer("–í—ã–±–æ—Ä —Å–±—Ä–æ—à–µ–Ω")


@router.callback_query(RegistrationStates.waiting_for_gender, F.data.startswith("gender_"))
async def process_gender(callback: CallbackQuery, state: FSMContext):
    """–í—Ç–æ—Ä–æ–π —à–∞–≥ - –≤—ã–±–æ—Ä –ø–æ–ª–∞"""
    gender = int(callback.data.split("_")[1])
    await db.update_user_gender(callback.from_user.id, gender)
    await state.update_data(gender=gender)
    await callback.message.edit_text("‚úÖ –ü–æ–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:\n(–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∞–Ω–∫–µ—Ç—ã 3/4)")
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_age_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_age)


@router.callback_query(RegistrationStates.waiting_for_age, F.data.startswith("age_"))
async def process_age(callback: CallbackQuery, state: FSMContext):
    """–¢—Ä–µ—Ç–∏–π —à–∞–≥ - –≤—ã–±–æ—Ä –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    age = int(callback.data.split("_")[1])
    await state.update_data(age=age)
    await db.update_user_age(callback.from_user.id, age)

    await callback.message.edit_text("‚úÖ –í–æ–∑—Ä–∞—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ, –∫–æ–≥–æ –∏—â–µ—Ç–µ:\n(–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∞–Ω–∫–µ—Ç—ã 4/4)")
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–æ–∑—Ä–∞—Å—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_interested_age_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_interested_age)


@router.callback_query(RegistrationStates.waiting_for_interested_age, F.data.startswith("iage_"))
async def process_interested_age(callback: CallbackQuery, state: FSMContext):
    """–ß–µ—Ç–≤–µ—Ä—Ç—ã–π —à–∞–≥ - –≤—ã–±–æ—Ä –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    interested_age = int(callback.data.split("_")[1])
    await db.update_user_interested_age(callback.from_user.id, interested_age)

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–µ–º—ã –∏–∑ state –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
    data = await state.get_data()
    age = data.get("age", 0)
    gender = data.get("gender", 0)
    selected_topics = data.get("selected_topics", [])

    print(data)
    if selected_topics:
        await db.set_user_topics(callback.from_user.id, selected_topics)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await callback.message.edit_text(
        "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! ‚úÖ\n\n"
        f"‚Ä¢ –í—ã–±—Ä–∞–Ω–æ –æ—â—É—â–µ–Ω–∏–π: {len(selected_topics)}\n"
        f"‚Ä¢ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if gender == 1 else '–ñ–µ–Ω—Å–∫–∏–π'}\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {age_groups.get(age, '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"‚Ä¢ –ò—â—É: {age_groups.get(interested_age, '–õ—é–±–æ–π –≤–æ–∑—Ä–∞—Å—Ç')}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–≤!"
    )
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()
