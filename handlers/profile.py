from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import db
from keyboards.profile import get_gender_keyboard, get_topics_keyboard
from keyboards.main import get_main_keyboard

router = Router()

class ProfileStates(StatesGroup):
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_photo = State()
    waiting_for_topics = State()

@router.message(F.text == "üë§ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É")
@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–∫–µ—Ç—É")
async def start_profile(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=get_gender_keyboard())
    await state.set_state(ProfileStates.waiting_for_gender)

@router.message(ProfileStates.waiting_for_gender)
async def process_gender(message: Message, state: FSMContext):
    gender = "male" if "–ú—É–∂—Å–∫–æ–π" in message.text else "female"
    await state.update_data(gender=gender)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:", reply_markup=None)
    await state.set_state(ProfileStates.waiting_for_age)

@router.message(ProfileStates.waiting_for_age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text)
        if age < 18 or age > 100:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (18-100):")
            return
        await state.update_data(age=age)
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ñ–æ—Ç–æ:")
        await state.set_state(ProfileStates.waiting_for_photo)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")


@router.message(ProfileStates.waiting_for_photo, F.photo)
async def process_photo(message: Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)

    data = await state.get_data()
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—ã –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=get_topics_keyboard()
    )
    await state.update_data(selected_topics=[])
    await state.set_state(ProfileStates.waiting_for_topics)

@router.callback_query(ProfileStates.waiting_for_topics, F.data.startswith("topic_"))
async def process_topic(callback: CallbackQuery, state: FSMContext):
    topic = callback.data.split("_", 1)[1]
    data = await state.get_data()
    selected_topics = data.get("selected_topics", [])

    if topic in selected_topics:
        selected_topics.remove(topic)
        action = "—É–¥–∞–ª–µ–Ω–∞"
    else:
        selected_topics.append(topic)
        action = "–¥–æ–±–∞–≤–ª–µ–Ω–∞"

    await state.update_data(selected_topics=selected_topics)

    # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–µ–º
    updated_keyboard = get_topics_keyboard(selected_topics)

    try:
        await callback.message.edit_reply_markup(reply_markup=updated_keyboard)
        await callback.answer(f"–¢–µ–º–∞ {action}")
    except Exception:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∑–º–µ–Ω–µ–Ω–æ
        await callback.answer(f"–¢–µ–º–∞ {action}")


@router.callback_query(ProfileStates.waiting_for_topics, F.data == "topics_done")
async def finish_profile(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    selected_topics = data.get("selected_topics", [])

    if not selected_topics:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ç–µ–º—É!", show_alert=True)
        return

    try:
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await callback.message.edit_reply_markup(reply_markup=None)
    except Exception:
        pass

    await db.update_user_profile(
        callback.from_user.id,
        data['gender'],
        data['age'],
        data['photo'],
        selected_topics
    )

    await callback.message.answer("–ê–Ω–∫–µ—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞! ‚úÖ")
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=get_main_keyboard()
    )
    await state.clear()
