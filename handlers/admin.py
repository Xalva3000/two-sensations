from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from config import config
from database import db
from keyboards.main import get_main_menu_keyboard

ADMIN_IDS = config.ADMINS

router = Router()


def get_admin_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì∑ –ú–æ–¥–µ—Ä–∞—Ü–∏—è —Ñ–æ—Ç–æ", callback_data="admin_moderate_photos")],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ])

def get_admin_close_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ])


def get_photo_moderation_keyboard(seeker_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"photo_approve_{seeker_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"photo_reject_{seeker_id}")
        ],
        [InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å", callback_data="admin_close")]
    ])


@router.message(F.text == "/admin")
async def admin_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    await message.answer(
        "üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(F.data == "admin_stats")
async def admin_stats(callback: CallbackQuery):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    data = await db.count_not_confirmed_photo()
    await callback.message.answer(
        text=f"–ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Ñ–æ—Ç–æ: {data.get('count', 0)}",
        reply_markup=get_admin_close_keyboard()
    )


@router.callback_query(F.data == "admin_moderate_photos")
async def moderate_photos(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    unconfirmed_photos = await db.get_unconfirmed_photos()

    if not unconfirmed_photos:
        await callback.message.edit_text(
            "‚úÖ –ù–µ—Ç —Ñ–æ—Ç–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏!\n\n"
            "–í—Å–µ —Ñ–æ—Ç–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.",
            reply_markup=get_admin_keyboard()
        )
        return

    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Ñ–æ—Ç–æ –∏–∑ —Å–ø–∏—Å–∫–∞
    photo_data = unconfirmed_photos[0]
    seeker_id = photo_data['seeker_id']

    caption = (
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {photo_data['first_name']}\n"
        f"üÜî ID: {seeker_id}\n\n"
        f"–§–æ—Ç–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏:"
    )

    try:
        await callback.message.answer_photo(
            photo_data['photo_id'],
            caption=caption,
            reply_markup=get_photo_moderation_keyboard(seeker_id)
        )
    except Exception as e:
        await callback.message.edit_text(
            f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ:\n{str(e)}\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {photo_data['first_name']}\n"
            f"üÜî ID: {seeker_id}",
            reply_markup=get_photo_moderation_keyboard(seeker_id)
        )


@router.callback_query(F.data.startswith("photo_approve_"))
async def approve_photo(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Ñ–æ—Ç–æ"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    seeker_id = int(callback.data.replace('photo_approve_', ''))

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ
    await db.confirm_photo(seeker_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await callback.bot.send_message(
            seeker_id,
            "‚úÖ –í–∞—à–µ —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n"
            "–¢–µ–ø–µ—Ä—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å—Å—è –≤ –ø–æ–∏—Å–∫–µ."
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {seeker_id}: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    await callback.answer("‚úÖ –§–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ")
    await moderate_photos(callback)


@router.callback_query(F.data.startswith("photo_reject_"))
async def reject_photo(callback: CallbackQuery):
    """–û—Ç–∫–ª–æ–Ω—è–µ—Ç —Ñ–æ—Ç–æ"""
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return

    seeker_id = int(callback.data.replace('photo_reject_', ''))

    # –û—Ç–∫–ª–æ–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –±–∞–∑–µ
    await db.reject_photo(seeker_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    try:
        await callback.bot.send_message(
            seeker_id,
            "‚ùå –í–∞—à–µ —Ñ–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
            "–ü—Ä–∏—á–∏–Ω–∞: –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.\n\n"
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–æ—Ç–æ:\n"
            "‚Ä¢ –ß–µ—Ç–∫–æ–µ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ\n"
            "‚Ä¢ –õ–∏—Ü–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ö–æ—Ä–æ—à–æ –≤–∏–¥–Ω–æ\n"
            "‚Ä¢ –ë–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ª—é–¥–µ–π\n"
            "‚Ä¢ –ë–µ–∑ –Ω–µ–ø—Ä–∏–µ–º–ª–µ–º–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è"
        )
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {seeker_id}: {e}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
    await callback.answer("‚ùå –§–æ—Ç–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ")
    await moderate_photos(callback)


# @router.callback_query(F.data == "moderation_back")
# async def moderation_back(callback: CallbackQuery):
#     """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
#     if callback.from_user.id not in ADMIN_IDS:
#         await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
#         return
#
#     await callback.message.answer(
#         "üë®‚Äçüíº –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
#         reply_markup=get_admin_keyboard()
#     )


# @router.callback_query(F.data == "admin_back")
# async def admin_back(callback: CallbackQuery):
#     """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
#     await callback.message.edit_text(
#         "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
#         reply_markup=get_main_menu_keyboard()  # –ù—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
#     )

@router.callback_query(F.data == "admin_close")
async def admin_close(callback: CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è