from aiogram import Router, F
from aiogram.types import CallbackQuery

from LEXICON.numbers import age_groups
from database import db
from keyboards.connection_keyboards import get_connection_response_keyboard, get_connection_request_keyboard

router = Router()


@router.callback_query(F.data.startswith("accept_outer_profile_"))
async def accept_outer_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    # –ø–æ–ª—É—á–µ–Ω–∏–µ id –ø—Ä–∏–Ω—è—Ç–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞
    new_companion_id = int(callback.data.replace('accept_outer_profile_', ''))

    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await db.create_connection_request(user_id, new_companion_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    user_info = await db.get_user(user_id)
    companion_info = await db.get_user(new_companion_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É
    try:
        await callback.bot.send_message(
            chat_id=new_companion_id,
            text=f"üëã –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ!\n\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info['first_name']} —Ö–æ—á–µ—Ç —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–∞–º–∏.\n"
                 f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age_groups.get(user_info['age'], '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
                 f"üë´ –ü–æ–ª: {'–ú—É–∂—Å–∫–æ–π' if user_info['gender'] == 1 else '–ñ–µ–Ω—Å–∫–∏–π'}\n\n"
                 f"–†–∞–∑—Ä–µ—à–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É –∫–æ–Ω—Ç–∞–∫—Ç–∞?",
            reply_markup=get_connection_request_keyboard(user_id)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
        return

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
    await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")
    await callback.message.edit_text(
        "‚è≥ –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\n"
        "–ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, "
        "–∫–æ–≥–¥–∞ –æ–Ω –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ.",
        reply_markup=get_connection_response_keyboard(new_companion_id, False)
    )


@router.callback_query(F.data.startswith("accept_request_"))
async def accept_connection_request(callback: CallbackQuery):
    from_user_id = int(callback.data.replace('accept_request_', ''))
    to_user_id = callback.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    await db.update_connection_request(from_user_id, to_user_id, 'accepted')

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    await db.set_outer_companion(from_user_id, to_user_id)
    await db.set_income_companion(to_user_id, from_user_id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    from_user_info = await db.get_user(from_user_id)
    to_user_info = await db.get_user(to_user_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä—É
    try:
        from_username = await db.get_user_username(from_user_id) or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        to_username = await db.get_user_username(to_user_id) or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        await callback.bot.send_message(
            chat_id=from_user_id,
            text=f"üéâ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!\n\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {to_user_info['first_name']} –ø—Ä–∏–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.\n\n"
                 f"üíå –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É: @{to_username if to_username != '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' else 'username_not_set'}\n\n"
                 f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!",
            reply_markup=get_connection_response_keyboard(to_user_id, True)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    await callback.message.edit_text(
        f"‚úÖ –í—ã –ø—Ä–∏–Ω—è–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç {from_user_info['first_name']}!\n\n"
        f"üíå –ù–∞–ø–∏—à–∏—Ç–µ –µ–º—É: @{from_username if from_username != '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å' else 'username_not_set'}\n\n"
        f"–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è!",
        reply_markup=get_connection_response_keyboard(from_user_id, True)
    )


@router.callback_query(F.data.startswith("reject_request_"))
async def reject_connection_request(callback: CallbackQuery):
    from_user_id = int(callback.data.replace('reject_request_', ''))
    to_user_id = callback.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø—Ä–æ—Å–∞
    await db.update_connection_request(from_user_id, to_user_id, 'rejected')

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    to_user_info = await db.get_user(to_user_id)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞ –æ–± –æ—Ç–∫–∞–∑–µ
    try:
        await callback.bot.send_message(
            chat_id=from_user_id,
            text=f"‚ùå –ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω\n\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {to_user_info['first_name']} –æ—Ç–∫–ª–æ–Ω–∏–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.",
            reply_markup=get_connection_response_keyboard(to_user_id, False)
        )
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ—Ç–∫–∞–∑–µ: {e}")

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    await callback.message.edit_text(
        f"‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        reply_markup=get_connection_response_keyboard(from_user_id, False)
    )


@router.callback_query(F.data.startswith("accept_outer_profile_"))
async def accept_outer_profile(callback: CallbackQuery):
    user_id = callback.from_user.id
    new_companion_id = int(callback.data.replace('accept_outer_profile_', ''))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ –∑–∞–ø—Ä–æ—Å
    existing_request = await db.get_connection_request(user_id, new_companion_id)
    if existing_request and existing_request['status'] == 'pending':
        await callback.answer("‚è≥ –ó–∞–ø—Ä–æ—Å —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞")
        return

    if existing_request and existing_request['status'] == 'accepted':
        await callback.answer("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        return

    if existing_request and existing_request['status'] == 'rejected':
        await callback.answer("‚ùå –ó–∞–ø—Ä–æ—Å –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω —Ä–∞–Ω–µ–µ")
        return

@router.callback_query(F.data == "connection_cancel")
async def back_to_companions(callback: CallbackQuery):
    try:
        await callback.message.delete()
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
